import { RadarColorMapping, RadarCommonProps, RadarDataProps, RadarCustomLayerProps, RadarSvgProps, BoundLegendProps } from './types';
export declare const useRadar: <D extends Record<string, unknown>>({ data, keys, indexBy, rotationDegrees, maxValue, valueFormat, curve, width, height, colors, legends, defs, fill, }: {
    data: RadarDataProps<D>["data"];
    keys: RadarDataProps<D>["keys"];
    indexBy: RadarDataProps<D>["indexBy"];
    rotationDegrees: RadarCommonProps<D>["rotation"];
    maxValue: RadarCommonProps<D>["maxValue"];
    valueFormat?: RadarCommonProps<D>["valueFormat"];
    curve: RadarCommonProps<D>["curve"];
    width: number;
    height: number;
    colors: RadarCommonProps<D>["colors"];
    legends: RadarCommonProps<D>["legends"];
    defs: RadarSvgProps<D>["defs"];
    fill: RadarSvgProps<D>["fill"];
}) => {
    getIndex: (datum: D) => string;
    indices: string[];
    formatValue: (value: number, context: string) => string;
    colorByKey: RadarColorMapping;
    fillByKey: Record<string, string | null>;
    boundDefs: any;
    rotation: number;
    radius: number;
    radiusScale: import("d3-scale").ScaleLinear<number, number, never>;
    centerX: number;
    centerY: number;
    angleStep: number;
    curveFactory: import("d3-shape").CurveFactory;
    legendData: {
        id: string;
        label: string;
        color: string;
    }[];
    boundLegends: BoundLegendProps[];
    customLayerProps: RadarCustomLayerProps<D>;
};
//# sourceMappingURL=hooks.d.ts.map